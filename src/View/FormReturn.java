   package View;


import Controller.DBConnection;
import Controller.AmountException;
import Controller.DateException;
import Controller.QuantityException;
import Controller.StatusException;
import Model.Book;
import Model.Reader;
import com.mysql.cj.protocol.Resultset;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */
public class FormReturn extends javax.swing.JFrame {

    /**
     * Creates new form FormIssue
     */
    
    private Menu parentFrame;
    private DefaultTableModel tm_violate, tm_reader, tm_select_violate;
    private TableRowSorter<DefaultTableModel> trs;
    
    public FormReturn(Menu parent) {
        initComponents();
        this.parentFrame = parent;
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        
        String[] cols = { "Mã sách", "Tên sách", "Ngày mượn", "Ngày Trả", "Lý do", "Tiền phạt"};
        
        String[] cols_ = {"Mã mượn","Mã sách", "Tên sách", "Ngày mượn", "Ngày trả", "Tình trạng"};
        String[] cols__ = {"Mã mượn", "Mã sách", "Ngày trả", "Lý do", "Tiền phạt"};
        tm_violate = new DefaultTableModel(cols, 0);
        tm_reader = new DefaultTableModel(cols_, 0);
        tm_select_violate = new DefaultTableModel(cols__, 0);
        
        tableVipham.setModel(tm_violate);
        tableDG.setModel(tm_reader);
        tableSelectViolate.setModel(tm_select_violate);
        
        DefaultTableModel dtm = (DefaultTableModel) tableVipham.getModel();
        trs = new TableRowSorter<>(dtm);
        tableVipham.setRowSorter(trs);
        
        dtm = (DefaultTableModel) tableDG.getModel();
        trs = new TableRowSorter<>(dtm);
        tableDG.setRowSorter(trs);
        
        dtm = (DefaultTableModel) tableSelectViolate.getModel();
        trs = new TableRowSorter<>(dtm);
        tableSelectViolate.setRowSorter(trs);
        
        tenDG.setEnabled(false);
        soSach.setEnabled(false);
        tienPhat.setEnabled(false);
        ngayHetHan.setEnabled(false);
        btTra.setEnabled(false);
        btVipham.setEnabled(false);
        
        tableSelectViolate.setComponentPopupMenu(tableDGPopupMenu);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableDGPopupMenu = new javax.swing.JPopupMenu();
        MenuItemXoa = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        maDG = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ngayHetHan = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        tenDG = new javax.swing.JTextField();
        soSach = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        tienPhat = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableVipham = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDG = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btTra = new javax.swing.JButton();
        ngayTra = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        btVipham = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSelectViolate = new javax.swing.JTable();

        MenuItemXoa.setText("Xoá");
        MenuItemXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemXoaActionPerformed(evt);
            }
        });
        tableDGPopupMenu.add(MenuItemXoa);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý trả sách");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin độc giả", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 11))); // NOI18N

        jLabel1.setText("Mã độc giả:");

        jLabel2.setText("Tên độc giả:");

        maDG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maDGActionPerformed(evt);
            }
        });

        jLabel3.setText("Ngày hết hạn:");

        ngayHetHan.setDateFormatString("yyyy-MM-dd");

        jLabel4.setText("Số sách đang mượn: ");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/seach.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("Tiền phạt:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maDG)
                    .addComponent(tenDG)
                    .addComponent(soSach)
                    .addComponent(ngayHetHan, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(tienPhat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maDG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tenDG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(soSach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(tienPhat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ngayHetHan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        tableVipham.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableVipham);

        tableDG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã sách", "Tên sách", "Ngày mượn", "Ngày trả"
            }
        ));
        tableDG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDGMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableDG);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btTra.setText("Trả");
        btTra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTraActionPerformed(evt);
            }
        });

        ngayTra.setDateFormatString("yyyy-MM-dd");

        jLabel8.setText("Ngày trả:");

        btVipham.setText("Vi phạm");
        btVipham.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btViphamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(281, 281, 281)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ngayTra, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btTra, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btVipham)
                        .addGap(48, 48, 48))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btTra)
                        .addComponent(btVipham))
                    .addComponent(ngayTra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableSelectViolate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSelectViolateMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableSelectViolate);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(1019, 634));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    
    void setReader(String id){

        tm_violate.setRowCount(0);
        
        
        try{
            Connection conn = DBConnection.getConnection();
            String sql_select = "SELECT * FROM reader WHERE id = ?";
            PreparedStatement pst = conn.prepareStatement(sql_select);
            pst.setString(1, id);
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                 maDG.setText(rs.getString("id"));
                 tenDG.setText(rs.getString("name"));          
                 ngayHetHan.setDate(rs.getDate("out_of_date"));
            }
            sql_select =  "SELECT COUNT(*) FROM(SELECT issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id "
                    + "WHERE issue_book_detail.status = 'Chưa trả' AND issue_book.reader_id = ?) AS subquery";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                soSach.setText(rs.getInt(1)+"");
            }             
            tm_reader.setRowCount(0);
            sql_select = "SELECT subquery.issue_id, subquery.book_id, book.name, subquery.issue_date, subquery.return_date, subquery.status  FROM(SELECT issue_book.issue_id, issue_book_detail.book_id, issue_book.issue_date, issue_book_detail.return_date, issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id WHERE issue_book.reader_id = ? ) AS subquery "
                    + "LEFT JOIN book ON subquery.book_id = book.id;";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                int issue_id = rs.getInt(1);
                String book_id = rs.getString(2);
                String book_name = rs.getString(3);
                Date issue_date = rs.getDate(4);
                Date return_date =  rs.getDate(5);
                String status = rs.getString(6);
                
                if(status.equals("Đã trả")){
                        Object[] ob = {issue_id, book_id, book_name, issue_date, getActualReturnDate(issue_id, book_id), status};
                        tm_reader.addRow(ob);
                        
                }
                else{
                    Object[] ob = {issue_id, book_id, book_name, issue_date, return_date, status};
                    tm_reader.addRow(ob);
                }                         
            }
            sql_select = "SELECT * FROM (SELECT issue_book_detail.id, issue_book_detail.book_id, subquery.issue_date FROM (SELECT issue_book.issue_id, issue_book.issue_date FROM issue_book WHERE reader_id = ?) AS subquery LEFT JOIN issue_book_detail ON subquery.issue_id = issue_book_detail.issue_id) AS ibd JOIN book AS b ON ibd.book_id = b.id JOIN violate AS v ON ibd.id = v.issue_book_detail_id WHERE v.punish_money <> 0;";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            int total_punish_money = 0;
            while(rs.next()){
                String book_id = rs.getString("book_id");
                String book_name = rs.getString("name");
                Date issue_date = rs.getDate("issue_date");
                Date return_date = rs.getDate("actual_return_date");
                String reason = rs.getString("reason");
                int punish_money = rs.getInt("punish_money");
                Object[] ob = {book_id, book_name, issue_date, return_date, reason, punish_money};
                tm_violate.addRow(ob);
                total_punish_money += punish_money;
            }
            tienPhat.setText(total_punish_money+"");
            
       
        }       
        catch(Exception e){
            e.printStackTrace(); 
        } 
        tm_select_violate.setRowCount(0);     
    }
    
    Date getActualReturnDate(int issue_id, String book_id){
        Date actual_return_date = null;
        try{
            Connection conn = DBConnection.getConnection(); 
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM issue_book_detail LEFT JOIN violate ON violate.issue_book_detail_id = issue_book_detail.id WHERE issue_book_detail.issue_id = ? AND issue_book_detail.book_id = ?;");
            pst.setInt(1, issue_id);
            pst.setString(2, book_id);
            ResultSet rs = pst.executeQuery();            
            while(rs.next()){
                actual_return_date =  rs.getDate("actual_return_date");
            }            
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        return actual_return_date;
    }
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Reader_ReturnJDialog r = new Reader_ReturnJDialog(this,true);
        r.setVisible(true);
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void Reset(){
        maDG.setText("");
        tenDG.setText("");
        soSach.setText("");
        tienPhat.setText("");
        ngayHetHan.setDate(null);
        ngayTra.setDate(null);
        tm_reader.setRowCount(0);
    }
    
    
    private void getViolate(String reader_id){
        try{
    
            Class.forName( "com.mysql.cj.jdbc.Driver");
            Connection conn = DBConnection.getConnection();
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM violate WHERE reader_id = ?");
            pst.setString(1, reader_id);
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                Object[] ob = {reader_id, tenDG.getText(),rs.getString("book_id"), rs.getString("book_name"), rs.getString("issue_date"), rs.getString("return_date"), rs.getString("reason"), rs.getInt("punish_money")};
                tm_violate.addRow(ob);
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
    
    
    
    private void maDGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maDGActionPerformed
         // TODO add your handling code here:
        
        boolean isExist = false;        
        try{
            
            Connection conn = DBConnection.getConnection();
            String sql_select = "SELECT * FROM reader WHERE id = ?";
            PreparedStatement pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                 maDG.setText(rs.getString("id"));
                 tenDG.setText(rs.getString("name"));          
                 ngayHetHan.setDate(rs.getDate("out_of_date"));
                 isExist = true;
            }
            if(isExist){
            sql_select =  "SELECT COUNT(*) FROM(SELECT issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id "
                    + "WHERE issue_book_detail.status = 'Chưa trả' AND issue_book.reader_id = ?) AS subquery";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                soSach.setText(rs.getInt(1)+"");
            }
                
            tm_reader.setRowCount(0);
      
         
            sql_select = "SELECT subquery.issue_id, subquery.book_id, book.name, subquery.issue_date, subquery.return_date, subquery.status  FROM(SELECT issue_book.issue_id, issue_book_detail.book_id, issue_book.issue_date, issue_book_detail.return_date, issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id WHERE issue_book.reader_id = ? ) AS subquery "
                    + "LEFT JOIN book ON subquery.book_id = book.id;";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                int issue_id = rs.getInt(1);
                String book_id = rs.getString(2);
                String book_name = rs.getString(3);
                Date issue_date = rs.getDate(4);
                Date return_date =  rs.getDate(5);
                String status = rs.getString(6);
                if(status.equals("Đã trả")){
                        Object[] ob = {issue_id, book_id, book_name, issue_date, getActualReturnDate(issue_id, book_id), status};
                        tm_reader.addRow(ob);
                        
                  }
                    
                        Object[] ob = {issue_id, book_id, book_name, issue_date, return_date, status};
                        tm_reader.addRow(ob);
                   
                
                
                
            }
            }
         
        }
        catch(Exception e){
            e.printStackTrace(); 
        }
        if(!isExist){
            JOptionPane.showMessageDialog(this, "Không tồn tại độc giả!");
        }
        tm_select_violate.setRowCount(0);
        
    }//GEN-LAST:event_maDGActionPerformed

    private void btTraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTraActionPerformed
        // TODO add your handling code here:
        int row = tableSelectViolate.getSelectedRow();    
        if(row>=0 && row<=tableSelectViolate.getRowCount()-1){  
              tm_violate.setRowCount(0);    
        try{
            Connection conn = DBConnection.getConnection();
            PreparedStatement pst = null;
            int count = 0;
            
            for(int i=0; i<tm_select_violate.getRowCount(); i++){
                ++count;
                pst = conn.prepareStatement("SELECT id FROM issue_book_detail WHERE issue_id = ? AND book_id = ?");
                pst.setInt(1,Integer.parseInt(tm_select_violate.getValueAt(i, 0).toString()));
                pst.setString(2, tm_select_violate.getValueAt(i, 1).toString());
                ResultSet rs = pst.executeQuery();
                int issue_book_detail_id = 0;
                while(rs.next()){
                    issue_book_detail_id = rs.getInt(1);
                }
                //Trả sách vào table vi phạm           
                
                pst = conn.prepareStatement("INSERT INTO violate(reason, punish_money, actual_return_date, issue_book_detail_id) VALUES(?, ?, ?, ?)");
                pst.setString(1, tm_select_violate.getValueAt(i, 3).toString());
                pst.setInt(2, Integer.parseInt(tm_select_violate.getValueAt(i, 4).toString()));
                pst.setDate( 3, new java.sql.Date(sdf.parse(tm_select_violate.getValueAt(i, 2).toString()).getTime()));
                pst.setInt(4,issue_book_detail_id);
                pst.executeUpdate();
                
                
                
                
                pst = conn.prepareStatement("SELECT status FROM issue_book_detail WHERE issue_id = ? AND book_id = ?;");
                pst.setInt(1, Integer.parseInt(tm_select_violate.getValueAt(i, 0).toString()));
                pst.setString(2,tm_select_violate.getValueAt(i, 1).toString());
                rs = pst.executeQuery();
                String status = "";
                while(rs.next()){
                    status = rs.getString(1);
                }
                //cập nhật trạng thái cho sách
                if(status.equals("Chưa trả")){
                    
                    pst = conn.prepareStatement("UPDATE issue_book_detail SET status = ? WHERE issue_id = ? and book_id = ?");
                    pst.setString(1, "Đã trả");
                    pst.setInt(2, Integer.parseInt(tm_select_violate.getValueAt(i, 0).toString()));
                    pst.setString(3, tm_select_violate.getValueAt(i, 1).toString());
                    pst.executeUpdate();
                    
                    pst = conn.prepareStatement("UPDATE book SET quantity = quantity+1 WHERE id = ? ");
                    pst.setString(1, tm_select_violate.getValueAt(i, 1).toString());
                    pst.executeUpdate();
                     
                }
              
                                               
                
            }
            
            if(count==tm_select_violate.getRowCount()){
                JOptionPane.showMessageDialog(this, "Trả thành công!");
                tm_select_violate.setRowCount(0);
                tm_reader.setRowCount(0);
                //Cập nhật lại số sách đang mượn
                String sql_select = "";
                sql_select =  "SELECT COUNT(*) FROM(SELECT issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id "
                    + "WHERE issue_book_detail.status = 'Chưa trả' AND issue_book.reader_id = ?) AS subquery";
                pst = conn.prepareStatement(sql_select);
                pst.setString(1, maDG.getText());
                ResultSet rs = pst.executeQuery();
                while(rs.next()){
                    soSach.setText(rs.getInt(1)+"");
                }             
                //Cập nhật danh sách trạng thái sách vào tm_reader
                sql_select = "SELECT subquery.issue_id, subquery.book_id, book.name, subquery.issue_date, subquery.return_date, subquery.status  FROM(SELECT issue_book.issue_id, issue_book_detail.book_id, issue_book.issue_date, issue_book_detail.return_date, issue_book_detail.status FROM issue_book "
                        + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id WHERE issue_book.reader_id = ? ) AS subquery "
                        + "LEFT JOIN book ON subquery.book_id = book.id;";
                pst = conn.prepareStatement(sql_select);
                pst.setString(1, maDG.getText());
                rs = pst.executeQuery();
                while(rs.next()){
                    int issue_id = rs.getInt(1);
                    String book_id = rs.getString(2);
                    String book_name = rs.getString(3);
                    Date issue_date = rs.getDate(4);
                    Date return_date =  rs.getDate(5);
                    String status = rs.getString(6);
                  
                    if(status.equals("Đã trả")){
                       
                        Object[] ob = {issue_id, book_id, book_name, issue_date, getActualReturnDate(issue_id, book_id), status};
                        tm_reader.addRow(ob);
                        
                    }
                    else{
                        Object[] ob = {issue_id, book_id, book_name, issue_date, return_date, status};
                        tm_reader.addRow(ob);
                    }
                            
                    
                }
                
            }
      
            
            String sql_select = "SELECT * FROM (SELECT issue_book_detail.id, issue_book_detail.book_id, subquery.issue_date FROM (SELECT issue_book.issue_id, issue_book.issue_date FROM issue_book WHERE reader_id = ?) AS subquery LEFT JOIN issue_book_detail ON subquery.issue_id = issue_book_detail.issue_id) AS ibd JOIN book AS b ON ibd.book_id = b.id JOIN violate AS v ON ibd.id = v.issue_book_detail_id WHERE v.punish_money <> 0;";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            ResultSet rs = pst.executeQuery();
            int total_punish_money = 0;
            while(rs.next()){
                String book_id = rs.getString("book_id");
                String book_name = rs.getString("name");
                Date issue_date = rs.getDate("issue_date");
                Date return_date = rs.getDate("actual_return_date");
                String reason = rs.getString("reason");
                int punish_money = rs.getInt("punish_money");
                Object[] ob = {book_id, book_name, issue_date, return_date, reason, punish_money};
                tm_violate.addRow(ob);
                total_punish_money += punish_money;
            }
            tienPhat.setText(total_punish_money+"");
            
            
      
            
            
        }
        catch(SQLException e){
            e.printStackTrace();
        }   
        catch (ParseException ex) {
                Logger.getLogger(FormReturn.class.getName()).log(Level.SEVERE, null, ex);
        }
                 






        } 

    }//GEN-LAST:event_btTraActionPerformed

    void setViolidate(String reason,String punish_money, boolean out_of){
        
        int row = tableDG.getSelectedRow(); 
        boolean out_of_date = false; 
        if(row>=0 && row<=tableDG.getRowCount()-1){
            int price = 0;
            try{
  
                Connection conn = DBConnection.getConnection();
                PreparedStatement pst = conn.prepareStatement("SELECT * FROM book WHERE id = ?");
                pst.setString(1, tm_reader.getValueAt(row, 1).toString());
                ResultSet rs = pst.executeQuery();
                while(rs.next()){
                    price = rs.getInt("price");
                }             
            }
            catch(Exception e){
                e.printStackTrace();
            }
              
                           
                if(out_of){
                    JOptionPane.showMessageDialog(this, "Độc giả trả muộn bị phạt 20% giá sách!");                           
                    Object[] ob = {tm_reader.getValueAt(row, 0), tm_reader.getValueAt(row, 1), sdf.format(ngayTra.getDate()), "Trả quá hạn", price*20/100};
                    tm_select_violate.addRow(ob);                    
                }
                if(reason.equals("") && punish_money.equals("")){
                    Object[] ob = {tm_reader.getValueAt(row, 0), tm_reader.getValueAt(row, 1), sdf.format(ngayTra.getDate()), "Thành công", "0"};
                    tm_select_violate.addRow(ob);
                }
                else{
                    Object[] ob = {tm_reader.getValueAt(row, 0), tm_reader.getValueAt(row, 1), sdf.format(ngayTra.getDate()), reason, punish_money};
                    tm_select_violate.addRow(ob);
                }      
        }
              
    }
    
    private void tableDGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDGMouseClicked
        // TODO add your handling code here:
        int row = tableDG.getSelectedRow();
        if(row>=0 && row<=tableDG.getRowCount()-1){          
            btVipham.setEnabled(true);
        }
    }//GEN-LAST:event_tableDGMouseClicked

    private void btViphamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btViphamActionPerformed
        // TODO add your handling code here:
        int row = tableDG.getSelectedRow();
        
        if(row>=0 && row<=tableDG.getRowCount()-1){
                
            boolean out_of_date = false; 
            try{
                 String status = tm_reader.getValueAt(row, 5).toString();
                if(status.equals("Đã trả")) throw new StatusException();
                if(ngayTra.getDate()==null) throw new DateException(); 
                else{
                 
                    Date return_date_real = ngayTra.getDate();
                    
                        Date return_date = sdf.parse(tm_reader.getValueAt(row, 3).toString());
                        long day = (return_date_real.getTime() - return_date.getTime())/(24 * 60 * 60 * 1000);
                        if(day>31){
                            out_of_date = true;
                        }

                                 
                }
                if(out_of_date){
                  ViolateJDialog v = new ViolateJDialog(this, true, tm_reader.getValueAt(row, 0).toString(), tm_reader.getValueAt(row, 1).toString(), out_of_date);  
                  v.setVisible(true);
                }
                else{
                    ViolateJDialog v = new ViolateJDialog(this, true, tm_reader.getValueAt(row, 0).toString(), tm_reader.getValueAt(row, 1).toString(), out_of_date);  
                    v.setVisible(true);
                }
                   
      
            }
            catch(StatusException e){
                JOptionPane.showMessageDialog(this, "Sách đã trả không được trả nữa!");
            }
            catch(DateException e){
                JOptionPane.showMessageDialog(this, "Ngày không để trống");
            } catch (ParseException ex) {
                Logger.getLogger(FormReturn.class.getName()).log(Level.SEVERE, null, ex);
            }
            
  
        }    
    }//GEN-LAST:event_btViphamActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        parentFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void tableSelectViolateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSelectViolateMouseClicked
        // TODO add your handling code here:
        int row = tableSelectViolate.getSelectedRow();
        if(row>=0 && row<=tableSelectViolate.getRowCount()-1){          
            btTra.setEnabled(true);
        }
    }//GEN-LAST:event_tableSelectViolateMouseClicked

    private void MenuItemXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemXoaActionPerformed
        // TODO add your handling code here:
        int row = tableSelectViolate.getSelectedRow();
        if(row>=0 && row<=tableSelectViolate.getRowCount()-1){          
            tm_select_violate.removeRow(row);
            
        }
        else{
           JOptionPane.showMessageDialog(this, "Vui lòng chọn vi phạm để xoá!", "Lỗi", JOptionPane.ERROR_MESSAGE);
           
        }
    }//GEN-LAST:event_MenuItemXoaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormReturn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormReturn(new Menu()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuItemXoa;
    private javax.swing.JButton btTra;
    private javax.swing.JButton btVipham;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField maDG;
    private com.toedter.calendar.JDateChooser ngayHetHan;
    private com.toedter.calendar.JDateChooser ngayTra;
    private javax.swing.JTextField soSach;
    private javax.swing.JTable tableDG;
    private javax.swing.JPopupMenu tableDGPopupMenu;
    private javax.swing.JTable tableSelectViolate;
    private javax.swing.JTable tableVipham;
    private javax.swing.JTextField tenDG;
    private javax.swing.JTextField tienPhat;
    // End of variables declaration//GEN-END:variables
}
