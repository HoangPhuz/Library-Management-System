/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Controller.DBConnection;
import Controller.AmountException;
import Controller.DateException;
import Controller.EmptyException;
import Controller.QuantityException;
import Model.Book;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperReportsContext;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Admin
 */
public class FormIssue extends javax.swing.JFrame {

    /**
     * Creates new form FormIssue
     */
    
    private Menu parentFrame;
    
    private DefaultTableModel tm_book, tm_reader, tm_select;
    private TableRowSorter<DefaultTableModel> trs;
    
    public FormIssue(Menu parent) {
        initComponents();
        this.parentFrame = parent;
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
  
        String[] cols = {"STT", "Mã sách", "Tên sách", "Thể loại",  "Tác giả", "Nhà xuất bản", "Số lượng", "Giá Tiền"};
        String[] cols_ = {"Mã sách", "Tên sách", "Ngày mượn", "Ngày trả", "Tình trạng"};
        String[] cols__ = {"Mã sách", "Tên sách", "Ngày mượn", "Ngày trả"}; 
        
        tm_book = new DefaultTableModel(cols, 0);
        tm_reader = new DefaultTableModel(cols_, 0);
        tm_select = new DefaultTableModel(cols__, 0);
        tableSach.setModel(tm_book);
        tableDG.setModel(tm_reader);
        tableChon.setModel(tm_select);
        
        
        DefaultTableModel dtm = (DefaultTableModel) tableSach.getModel();
        trs = new TableRowSorter<>(dtm);
        tableSach.setRowSorter(trs);
        dtm = (DefaultTableModel) tableDG.getModel();
        trs = new TableRowSorter<>(dtm);
        tableDG.setRowSorter(trs);
        
  
        tenDG.setEnabled(false);
        soSach.setEnabled(false);
        ngayHetHan.setEnabled(false);
        btMuon.setEnabled(false);
        btChon.setEnabled(false);
        btBoChon.setEnabled(false);
        btInPhieuMuon.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        maDG = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ngayHetHan = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        tenDG = new javax.swing.JTextField();
        soSach = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSach = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btDanhSach = new javax.swing.JButton();
        ngayMuon = new com.toedter.calendar.JDateChooser();
        ngayTra = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        btMuon = new javax.swing.JButton();
        btInPhieuMuon = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDG = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableChon = new javax.swing.JTable();
        btChon = new javax.swing.JButton();
        btBoChon = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quản lý mượn sách");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin độc giả", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 11))); // NOI18N

        jLabel1.setText("Mã độc giả:");

        jLabel2.setText("Tên độc giả:");

        maDG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maDGActionPerformed(evt);
            }
        });

        jLabel3.setText("Ngày hết hạn:");

        ngayHetHan.setDateFormatString("yyyy-MM-dd");

        jLabel4.setText("Số sách đang mượn: ");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/seach.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maDG)
                    .addComponent(tenDG)
                    .addComponent(soSach)
                    .addComponent(ngayHetHan, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(maDG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tenDG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(soSach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(ngayHetHan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        tableSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSachMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSach);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel6.setText("Mã sách/tên sách/thể loại:");

        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setText(" Nhập mã sách/tên sách/thể loại cần tìm");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel7.setText("Ngày mượn:");

        btDanhSach.setText("Danh sách");
        btDanhSach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDanhSachActionPerformed(evt);
            }
        });

        ngayMuon.setDateFormatString("yyyy-MM-dd");

        ngayTra.setDateFormatString("yyyy-MM-dd");

        jLabel8.setText("Ngày trả:");

        btMuon.setText("Mượn");
        btMuon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMuonActionPerformed(evt);
            }
        });

        btInPhieuMuon.setText("In Phiếu");
        btInPhieuMuon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInPhieuMuonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ngayMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(ngayTra, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(btDanhSach, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btInPhieuMuon, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btDanhSach)
                        .addComponent(btMuon)
                        .addComponent(btInPhieuMuon))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ngayMuon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ngayTra, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ngayMuon, ngayTra});

        tableDG.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã sách", "Tên sách", "Ngày mượn", "Ngày trả"
            }
        ));
        tableDG.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDGMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableDG);

        tableChon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableChonMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableChon);

        btChon.setText("Chọn");
        btChon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btChonActionPerformed(evt);
            }
        });

        btBoChon.setText("Bỏ chọn");
        btBoChon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBoChonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(btChon)
                .addGap(18, 18, 18)
                .addComponent(btBoChon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btChon)
                    .addComponent(btBoChon))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(1019, 634));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    void setReader(String id){ 
       
        try{
            Connection conn = DBConnection.getConnection();
            String sql_select = "SELECT * FROM reader WHERE id = ?";
            PreparedStatement pst = conn.prepareStatement(sql_select);
            pst.setString(1, id);
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                 maDG.setText(rs.getString("id"));
                 tenDG.setText(rs.getString("name"));          
                 ngayHetHan.setDate(rs.getDate("out_of_date"));
            }
            sql_select =  "SELECT COUNT(*) FROM(SELECT issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id "
                    + "WHERE issue_book_detail.status = 'Chưa trả' AND issue_book.reader_id = ?) AS subquery";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                soSach.setText(rs.getInt(1)+"");
            }
                
            tm_reader.setRowCount(0);
            
            
            sql_select = "SELECT subquery.issue_id, subquery.book_id, book.name, subquery.issue_date, subquery.return_date, subquery.status  FROM(SELECT issue_book.issue_id, issue_book_detail.book_id, issue_book.issue_date, issue_book_detail.return_date, issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id WHERE issue_book.reader_id = ? ) AS subquery "
                    + "LEFT JOIN book ON subquery.book_id = book.id;";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                int issue_id = rs.getInt(1);
                String book_id = rs.getString(2);
                String book_name = rs.getString(3);
                Date issue_date = rs.getDate(4);
                Date return_date =  rs.getDate(5);
                String status = rs.getString(6);
                
                if(status.equals("Đã trả")){
                        Object[] ob = {book_id, book_name, issue_date, getActualReturnDate(issue_id, book_id), status};
                        tm_reader.addRow(ob);
                        
                }
                else{
                    Object[] ob = {book_id, book_name, issue_date, return_date, status};
                    tm_reader.addRow(ob);
                }
                
                
                
            
            }
        }
        catch(Exception e){
            e.printStackTrace(); 
        }    
    }
    
    
     Date getActualReturnDate(int issue_id, String book_id){
        Date actual_return_date = null;
        try{
            Connection conn = DBConnection.getConnection(); 
            PreparedStatement pst = conn.prepareStatement("SELECT * FROM issue_book_detail LEFT JOIN violate ON violate.issue_book_detail_id = issue_book_detail.id WHERE issue_book_detail.issue_id = ? AND issue_book_detail.book_id = ?;");
            pst.setInt(1, issue_id);
            pst.setString(2, book_id);
            ResultSet rs = pst.executeQuery();            
            while(rs.next()){
                actual_return_date =  rs.getDate("actual_return_date");
            }            
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        return actual_return_date;
    }
    
    
    private void Reset(){
        maDG.setText("");
        tenDG.setText("");
        soSach.setText("");
        ngayHetHan.setDate(null);
        ngayMuon.setDate(null);
        tm_book.setRowCount(0);
        tm_reader.setRowCount(0);
    }
        
    private void maDGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maDGActionPerformed
        // TODO add your handling code here:
        boolean isExist = false;        
        try{

            Connection conn = DBConnection.getConnection();
            String sql_select = "SELECT * FROM reader WHERE id = ?";
            PreparedStatement pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            ResultSet rs = pst.executeQuery();
            while(rs.next()){
                 maDG.setText(rs.getString("id"));
                 tenDG.setText(rs.getString("name"));          
                 ngayHetHan.setDate(rs.getDate("out_of_date"));
                 isExist = true;
            }
            if(isExist){
            sql_select =  "SELECT COUNT(*) FROM(SELECT issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id "
                    + "WHERE issue_book_detail.status = 'Chưa trả' AND issue_book.reader_id = ?) AS subquery";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                soSach.setText(rs.getInt(1)+"");
            }
                
            tm_reader.setRowCount(0);
          
            
            
            sql_select = "SELECT subquery.issue_id, subquery.book_id, book.name, subquery.issue_date, subquery.return_date, subquery.status  FROM(SELECT issue_book.issue_id, issue_book_detail.book_id, issue_book.issue_date, issue_book_detail.return_date, issue_book_detail.status FROM issue_book "
                    + "RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id WHERE issue_book.reader_id = ? ) AS subquery "
                    + "LEFT JOIN book ON subquery.book_id = book.id;";
            pst = conn.prepareStatement(sql_select);
            pst.setString(1, maDG.getText());
            rs = pst.executeQuery();
            while(rs.next()){
                int issue_id = rs.getInt(1);
                String book_id = rs.getString(2);
                String book_name = rs.getString(3);
                Date issue_date = rs.getDate(4);
                Date return_date =  rs.getDate(5);
                String status = rs.getString(6);
                if(status.equals("Đã trả")){
                        Object[] ob = {book_id, book_name, issue_date, getActualReturnDate(issue_id, book_id), status};
                        tm_reader.addRow(ob);
                        
                }
                else{
                    Object[] ob = {book_id, book_name, issue_date, return_date, status};
                    tm_reader.addRow(ob);
                }
                
                              
                
                }
            }
 
                     
        }
        catch(Exception e){
            e.printStackTrace(); 
        }
        if(!isExist){
            JOptionPane.showMessageDialog(this, "Không tồn tại độc giả!");
        }
        
    }//GEN-LAST:event_maDGActionPerformed

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Reader_IssueJDialog r = new Reader_IssueJDialog(this, true);    
        r.setVisible(true);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        // TODO add your handling code here:
        if(jTextField1.getText().equals("Nhập mã sách/tên sách/thể loại cần tìm")){
            jTextField1.setText("");
            jTextField1.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_jTextField1FocusGained

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // TODO add your handling code here:
        if(jTextField1.getText().equals("")){
            jTextField1.setText("Nhập mã sách/tên sách/thể loại cần tìm");
            jTextField1.setForeground(new Color(153,153,153));
        }
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        DefaultTableModel obj = (DefaultTableModel) tableSach.getModel();
        TableRowSorter<DefaultTableModel> obj1 = new TableRowSorter<>(obj);
        tableSach.setRowSorter(obj1);
        obj1.setRowFilter(RowFilter.regexFilter(jTextField1.getText()));
    }//GEN-LAST:event_jTextField1KeyReleased

    private void btDanhSachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDanhSachActionPerformed
        // TODO add your handling code here:
        try{
            tm_book.setRowCount(0);
            boolean isExist = false;
     
            Connection conn = Controller.DBConnection.getConnection();
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM book");
            while(rs.next()){
                isExist = true;
                String id = rs.getString("id");
                String name = rs.getString("name");
                String type = rs.getString("type");
                String author = rs.getString("author");
                String publisher = rs.getString("publisher");
                int quantity = rs.getInt("quantity");
                int price = rs.getInt("price");
                Book b = new Book(id, name, author, publisher, type, tm_book.getRowCount()+1, quantity, price);
                tm_book.addRow(b.toObject());
            }
            if(!isExist){
                JOptionPane.showMessageDialog(this, "Không tồn tại sách!");
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_btDanhSachActionPerformed

    private void tableSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSachMouseClicked
        // TODO add your handling code here:
        int row = tableSach.getSelectedRow();
        if(row>=0 && row<=tableSach.getRowCount()-1){
            //btMuon.setEnabled(true);
            btChon.setEnabled(true);
        }
    }//GEN-LAST:event_tableSachMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        parentFrame.setVisible(true);
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void tableChonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableChonMouseClicked
        // TODO add your handling code here:
        int row = tableChon.getSelectedRow();
        if(row>=0 && row<=tableChon.getRowCount()-1){
            btBoChon.setEnabled(true);
            btMuon.setEnabled(true);
        }
    }//GEN-LAST:event_tableChonMouseClicked

    private void btChonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btChonActionPerformed
        // TODO add your handling code here:
        int row = tableSach.getSelectedRow();      
        if(row>=0 && row<=tableSach.getRowCount()-1){    
            String book_id = (String) tm_book.getValueAt(row, 1);
            String book_name = (String)tm_book.getValueAt(row, 2);
            String reader_id = maDG.getText();
            int book_number = Integer.parseInt(soSach.getText()) + tableChon.getRowCount();
            int quantity = (int)tm_book.getValueAt(row, 6);

            try{
                if(quantity==0) throw new AmountException();
                if(book_number==5) throw new QuantityException();
                if(ngayMuon.getDate()==null) throw new DateException();
                String issue_date = sdf.format(ngayMuon.getDate());
                if(ngayTra.getDate()==null) throw new DateException();
                String return_date = sdf.format(ngayTra.getDate());
        
   
        
                String status = "";
                boolean checkIssuedBook = false;
                boolean checkSelectedBook = false;
                boolean check = false;
                for(int i=0; i<tableDG.getRowCount(); i++){                 
                    if(tm_reader.getValueAt(i, 0).toString().equals(book_id)){
                        checkIssuedBook = true;
                        status = (String)tm_reader.getValueAt(i, 4);
                        break;
                    }
                }

                for(int i=0; i<tableChon.getRowCount(); i++){ 
                    if(tm_select.getValueAt(i, 0).toString().equals(book_id)){
                        checkSelectedBook = true;
                        break;
                    }
                }
                                           
                if(checkIssuedBook=true && status.equals("Chưa trả")){
                    check = true;
                }
                if(checkSelectedBook){
                    check = true;
                }
                
                if(check){
                    JOptionPane.showMessageDialog(this, "Mỗi quyển sách chỉ được mượn bởi một độc giả");
                }
                else{
                    ++book_number;
                    tm_book.setValueAt(quantity-1, row, 6);
                    Object[] ob = {book_id, book_name, issue_date, return_date};
                    tm_select.addRow(ob);
                }
                
         
            }
            catch(AmountException e){
                JOptionPane.showMessageDialog(this, "Không mượn được");
            }
            catch(QuantityException e){
                JOptionPane.showMessageDialog(this, "Mỗi độc giả chỉ được mượn tối đa 5 quyển");
            }
            catch(DateException e){
                JOptionPane.showMessageDialog(this, "Ngày không để trống!");
            }
            catch(Exception e){
                e.printStackTrace();
            }
        }
        else{
            btMuon.setEnabled(false);
        }
        
    }//GEN-LAST:event_btChonActionPerformed

    private void btMuonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMuonActionPerformed
        // TODO add your handling code here:
        try{
            Connection conn = DBConnection.getConnection();
            PreparedStatement pst = conn.prepareStatement("INSERT INTO issue_book(reader_id, issue_date) VALUES(?, ?)", Statement.RETURN_GENERATED_KEYS);
            pst.setString(1, maDG.getText());
            pst.setDate(2, new java.sql.Date(ngayMuon.getDate().getTime()));
            pst.executeUpdate();
            
            ResultSet rs = pst.getGeneratedKeys();
            int borrowingBookId = -1;
            if (rs.next()) {
                borrowingBookId = rs.getInt(1);
            }
            long ReturnDate = ngayTra.getDate().getTime();
            ArrayList<String> BookID = new ArrayList<>();
            for(int i=0; i<tm_select.getRowCount(); i++){
                BookID.add(tm_select.getValueAt(i, 0).toString());
            }
            
            pst = conn.prepareStatement("INSERT INTO issue_book_detail(issue_id, book_id, return_date, status) VALUES(?, ?, ?, ?)");
            for(String bookID: BookID){
                pst.setInt(1, borrowingBookId);
                pst.setString(2, bookID);
                pst.setDate(3, new java.sql.Date(ReturnDate));
                pst.setString(4, "Chưa trả");
                pst.executeUpdate();
            }
                      
            for(int i=0; i<tableChon.getRowCount(); i++){
                pst = conn.prepareStatement("UPDATE book SET quantity = quantity - 1 WHERE id = ?");
                pst.setString(1, tm_select.getValueAt(i, 0).toString());
                pst.executeUpdate();
          
                Object[] ob = {tm_select.getValueAt(i, 0), tm_select.getValueAt(i, 1), tm_select.getValueAt(i, 2), tm_select.getValueAt(i, 3), "Chưa trả"};
                tm_reader.addRow(ob);
            }
            soSach.setText((Integer.parseInt(soSach.getText()) + tableChon.getRowCount()) + "");
            JOptionPane.showMessageDialog(this, "Mượn thành công");
            tm_select.setRowCount(0);
            BookID.clear();
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
            
    }//GEN-LAST:event_btMuonActionPerformed

    private void btBoChonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBoChonActionPerformed
        // TODO add your handling code here:
        int row = tableChon.getSelectedRow();
        if(row>=0 && row<=tableChon.getRowCount()-1){
           String book_id = (String)tm_select.getValueAt(row,0);
           for(int i=0; i<tableSach.getRowCount(); i++){
               String bookID = (String)tm_book.getValueAt(i, 1);         
               int quantity = (int)tm_book.getValueAt(i, 6);
               if(bookID.equals(book_id)){
                   tm_book.setValueAt(quantity+1, i, 6);              
                   break;
               }
           }
           tm_select.removeRow(row);
           
        }
        if(tm_select.getRowCount()==0){
            btMuon.setEnabled(false);
        }
        
    }//GEN-LAST:event_btBoChonActionPerformed

    private void btInPhieuMuonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInPhieuMuonActionPerformed
        // TODO add your handling code here:
        if(maDG.getText().length()<=0){
            JOptionPane.showMessageDialog(this, "Chọn độc giả để in!");
            return;
        }
        boolean checkIssue = false;
        for(int i=0; i<tm_reader.getRowCount(); i++){
            if(tm_reader.getValueAt(i, 4).toString().equals("Chưa trả")){
                checkIssue = true;
                break;
            }              
        }
        if(checkIssue==false){
            JOptionPane.showMessageDialog(this, "Không có sách mượn để in!");
            return;
        }
        else{
     
        try {
            Connection conn = DBConnection.getConnection();         
            PreparedStatement pst = conn.prepareStatement("SELECT MAX(subsubquery.issue_id) FROM ( SELECT subquery.issue_id, subquery.reader_id, book.name AS book_name, book.type, book.publisher, subquery.issue_date, subquery.return_date FROM ( SELECT issue_book.issue_id, issue_book.reader_id, issue_book_detail.book_id, issue_book.issue_date, issue_book_detail.return_date FROM issue_book RIGHT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id WHERE issue_book_detail.status = 'Chưa trả' AND issue_book.reader_id = ? ) AS subquery LEFT JOIN book ON subquery.book_id = book.id ) AS subsubquery LEFT JOIN reader ON subsubquery.reader_id = reader.id;");
            pst.setString(1, maDG.getText());
            ResultSet rs = pst.executeQuery();
            int maPhieu = 0;
            while(rs.next()){
                maPhieu = rs.getInt(1);
            }
            pst = conn.prepareStatement("SELECT issue_book.issue_date, issue_book_detail.return_date FROM issue_book LEFT JOIN issue_book_detail ON issue_book.issue_id = issue_book_detail.issue_id WHERE issue_book.issue_id = ?;");
            pst.setInt(1, maPhieu);
            rs = pst.executeQuery();
            Date ngayMuon = null;
            Date ngayTra = null;
            while(rs.next()){
                ngayMuon = rs.getDate("issue_date");
                ngayTra = rs.getDate("return_date");
            }
                               
            HashMap<String, Object> map = new HashMap<>();
            map.put("MAPHIEU", maPhieu);
            map.put("MADG", maDG.getText());
            map.put("NGAYMUON", ngayMuon);
            map.put("NGAYTRA", ngayTra);
            JasperReport report = JasperCompileManager.compileReport("src/Report/phieuMuon.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(report, map, conn);
            JasperViewer.viewReport(jp, false);
            
        } catch (JRException ex) {
            Logger.getLogger(FormIssue.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        }
       
    
        
    }//GEN-LAST:event_btInPhieuMuonActionPerformed

    private void tableDGMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDGMouseClicked
        // TODO add your handling code here:
        int row = tableDG.getSelectedRow();
        if(row>=0 && row<tableDG.getRowCount()){
            btInPhieuMuon.setEnabled(true);
        }
    }//GEN-LAST:event_tableDGMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormIssue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormIssue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormIssue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormIssue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormIssue(new Menu()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBoChon;
    private javax.swing.JButton btChon;
    private javax.swing.JButton btDanhSach;
    private javax.swing.JButton btInPhieuMuon;
    private javax.swing.JButton btMuon;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField maDG;
    private com.toedter.calendar.JDateChooser ngayHetHan;
    private com.toedter.calendar.JDateChooser ngayMuon;
    private com.toedter.calendar.JDateChooser ngayTra;
    private javax.swing.JTextField soSach;
    private javax.swing.JTable tableChon;
    private javax.swing.JTable tableDG;
    private javax.swing.JTable tableSach;
    private javax.swing.JTextField tenDG;
    // End of variables declaration//GEN-END:variables
}
